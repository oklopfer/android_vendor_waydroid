From e33aba476f4076497a2014ab378a5b2be1e02b93 Mon Sep 17 00:00:00 2001
From: Alessandro Astone <ales.astone@gmail.com>
Date: Wed, 18 Jan 2023 23:13:18 +0100
Subject: [PATCH 1/2] surfaceflinger: Always send waydroid buffer info

Change-Id: If08ad6bf18f0c7de3b8d200035b4e0075b670ed0
---
 .../compositionengine/impl/OutputLayer.h        |  2 +-
 .../CompositionEngine/src/OutputLayer.cpp       |  9 +++++++--
 .../DisplayHardware/ComposerHal.cpp             | 17 ++++++++++++++---
 .../DisplayHardware/ComposerHal.h               |  3 +++
 .../surfaceflinger/DisplayHardware/HWC2.cpp     |  6 ++++++
 services/surfaceflinger/DisplayHardware/HWC2.h  |  2 ++
 6 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayer.h b/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayer.h
index 8cb5ae8b8e..f8a70677a3 100644
--- a/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayer.h
+++ b/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayer.h
@@ -65,7 +65,7 @@ protected:
 
 private:
     Rect calculateInitialCrop() const;
-    void writeOutputDependentGeometryStateToHWC(HWC2::Layer*, Hwc2::IComposerClient::Composition);
+    void writeOutputDependentGeometryStateToHWC(HWC2::Layer*, Hwc2::IComposerClient::Composition, const sp<GraphicBuffer>&);
     void writeOutputIndependentGeometryStateToHWC(HWC2::Layer*, const LayerFECompositionState&);
     void writeOutputDependentPerFrameStateToHWC(HWC2::Layer*);
     void writeOutputIndependentPerFrameStateToHWC(HWC2::Layer*, const LayerFECompositionState&);
diff --git a/services/surfaceflinger/CompositionEngine/src/OutputLayer.cpp b/services/surfaceflinger/CompositionEngine/src/OutputLayer.cpp
index e062bf7b68..3ffe08696b 100644
--- a/services/surfaceflinger/CompositionEngine/src/OutputLayer.cpp
+++ b/services/surfaceflinger/CompositionEngine/src/OutputLayer.cpp
@@ -335,7 +335,7 @@ void OutputLayer::writeStateToHWC(bool includeGeometry) {
     auto requestedCompositionType = outputIndependentState->compositionType;
 
     if (includeGeometry) {
-        writeOutputDependentGeometryStateToHWC(hwcLayer.get(), requestedCompositionType);
+        writeOutputDependentGeometryStateToHWC(hwcLayer.get(), requestedCompositionType, outputIndependentState->buffer);
         writeOutputIndependentGeometryStateToHWC(hwcLayer.get(), *outputIndependentState);
     }
 
@@ -349,7 +349,7 @@ void OutputLayer::writeStateToHWC(bool includeGeometry) {
 }
 
 void OutputLayer::writeOutputDependentGeometryStateToHWC(
-        HWC2::Layer* hwcLayer, hal::Composition requestedCompositionType) {
+        HWC2::Layer* hwcLayer, hal::Composition requestedCompositionType, const sp<GraphicBuffer>& buffer) {
     const auto& outputDependentState = getState();
 
     if (auto error = hwcLayer->setDisplayFrame(outputDependentState.displayFrame);
@@ -383,6 +383,11 @@ void OutputLayer::writeOutputDependentGeometryStateToHWC(
               outputDependentState.z, to_string(error).c_str(), static_cast<int32_t>(error));
     }
 
+    if (auto error = hwcLayer->setLayerHandleInfo(buffer); error != hal::Error::NONE) {
+        ALOGE("[%s] Failed to set layer buffer info: %s (%d)", getLayerFE().getDebugName(),
+              to_string(error).c_str(), static_cast<int32_t>(error));
+    }
+
     if (auto error = hwcLayer->setLayerName(getLayerFE().getDebugName());
             error != hal::Error::NONE) {
             ALOGE("[%s] Failed to set layer name: %s (%d)", getLayerFE().getDebugName(),
diff --git a/services/surfaceflinger/DisplayHardware/ComposerHal.cpp b/services/surfaceflinger/DisplayHardware/ComposerHal.cpp
index 107e34cc5f..b7f2c08cb2 100644
--- a/services/surfaceflinger/DisplayHardware/ComposerHal.cpp
+++ b/services/surfaceflinger/DisplayHardware/ComposerHal.cpp
@@ -741,9 +741,6 @@ Error Composer::setLayerBuffer(Display display, Layer layer,
 
     const native_handle_t* handle = nullptr;
     if (buffer.get()) {
-        if (mWaydroidDisplay)
-            mWaydroidDisplay->setLayerHandleInfo(mLayersZMap[layer], buffer->getPixelFormat(),
-                                              buffer->getStride());
         handle = buffer->getNativeBuffer()->handle;
     }
 
@@ -1380,6 +1377,20 @@ Error Composer::setLayerName(Display, Layer layer, std::string name) {
         return Error::NONE;
 }
 
+Error Composer::setLayerHandleInfo(Display, Layer layer, const sp<GraphicBuffer>& buffer) {
+    if (!mWaydroidDisplay)
+        return Error::UNSUPPORTED;
+
+    if (buffer.get() &&
+            mLayersHandleMap[mLayersZMap[layer]] != buffer->getNativeBuffer()->handle) {
+        mLayersHandleMap[mLayersZMap[layer]] = buffer->getNativeBuffer()->handle;
+        return mWaydroidDisplay->setLayerHandleInfo(mLayersZMap[layer],
+                                                    buffer->getPixelFormat(),
+                                                    buffer->getStride());
+    }
+    return Error::NONE;
+}
+
 CommandReader::~CommandReader()
 {
     resetData();
diff --git a/services/surfaceflinger/DisplayHardware/ComposerHal.h b/services/surfaceflinger/DisplayHardware/ComposerHal.h
index 41e6586fdf..6845356054 100644
--- a/services/surfaceflinger/DisplayHardware/ComposerHal.h
+++ b/services/surfaceflinger/DisplayHardware/ComposerHal.h
@@ -221,6 +221,7 @@ public:
 
     // WaydroidDisplay HAL 1.0
     virtual Error setLayerName(Display display, Layer layer, std::string name) = 0;
+    virtual Error setLayerHandleInfo(Display display, Layer layer, const sp<GraphicBuffer>& buffer) = 0;
 
     // Composer HAL 2.4
     virtual bool isVsyncPeriodSwitchSupported() = 0;
@@ -497,6 +498,7 @@ public:
 
     // WaydroidDisplay HAL 1.0
     Error setLayerName(Display display, Layer layer, std::string name) override;
+    Error setLayerHandleInfo(Display display, Layer layer, const sp<GraphicBuffer>& buffer) override;
 
 private:
 #if defined(USE_VR_COMPOSER) && USE_VR_COMPOSER
@@ -548,6 +550,7 @@ private:
     sp<IWaydroidDisplay> mWaydroidDisplay;
     std::map<Layer, int32_t> mLayersZMap;
     std::map<int32_t, std::string> mLayersNameMap;
+    std::map<int32_t, const native_handle_t*> mLayersHandleMap;
 };
 
 } // namespace impl
diff --git a/services/surfaceflinger/DisplayHardware/HWC2.cpp b/services/surfaceflinger/DisplayHardware/HWC2.cpp
index ebee967d7e..7d67626fc1 100644
--- a/services/surfaceflinger/DisplayHardware/HWC2.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWC2.cpp
@@ -1010,6 +1010,12 @@ Error Layer::setLayerName(std::string name)
     return static_cast<Error>(intError);
 }
 
+Error Layer::setLayerHandleInfo(const sp<GraphicBuffer>& buffer)
+{
+    auto intError = mComposer.setLayerHandleInfo(mDisplayId, mId, buffer);
+    return static_cast<Error>(intError);
+}
+
 } // namespace impl
 } // namespace HWC2
 } // namespace android
diff --git a/services/surfaceflinger/DisplayHardware/HWC2.h b/services/surfaceflinger/DisplayHardware/HWC2.h
index b9a75ce536..10fc3f6187 100644
--- a/services/surfaceflinger/DisplayHardware/HWC2.h
+++ b/services/surfaceflinger/DisplayHardware/HWC2.h
@@ -392,6 +392,7 @@ public:
 
     // WaydroidDisplay HAL 1.0
     [[clang::warn_unused_result]] virtual hal::Error setLayerName(std::string name) = 0;
+    [[clang::warn_unused_result]] virtual hal::Error setLayerHandleInfo(const sp<GraphicBuffer>& buffer) = 0;
 };
 
 namespace impl {
@@ -436,6 +437,7 @@ public:
 
     // WaydroidDisplay HAL 1.0
     hal::Error setLayerName(std::string name) override;
+    hal::Error setLayerHandleInfo(const sp<GraphicBuffer>& buffer) override;
 
 private:
     // These are references to data owned by HWC2::Device, which will outlive
-- 
2.39.0

